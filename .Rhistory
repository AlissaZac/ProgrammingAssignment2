| the second and fourth elements of the result are TRUE and the first and third elements are FALSE.
...
|==============================================                                                                                                     |  32%
| The `<` and `>=` symbols in these examples are called 'logical operators'. Other logical operators include `>`, `<=`, `==` for exact equality, and `!=`
| for inequality.
...
|==================================================                                                                                                 |  34%
| If we have two logical expressions, A and B, we can ask whether at least one is TRUE with A | B (logical 'or' a.k.a. 'union') or whether they are both
| TRUE with A & B (logical 'and' a.k.a. 'intersection'). Lastly, !A is the negation of A and is TRUE when A is FALSE and vice versa.
...
|======================================================                                                                                             |  37%
| It's a good idea to spend some time playing around with various combinations of these logical operators until you get comfortable with their use. We'll do
| a few examples here to get you started.
...
|==========================================================                                                                                         |  39%
| Try your best to predict the result of each of the following statements. You can use pencil and paper to work them out if it's helpful. If you get stuck,
| just guess and you've got a 50% chance of getting the right answer!
...
|==============================================================                                                                                     |  42%
| (3 > 5) & (4 == 4)
1: TRUE
2: FALSE
Selection: 2
| Nice work!
|==================================================================                                                                                 |  45%
| (TRUE == TRUE) | (TRUE == FALSE)
1: TRUE
2: FALSE
Selection: 1
| You're the best!
|======================================================================                                                                             |  47%
| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
1: TRUE
2: FALSE
Selection: 1
| You are doing so well!
|==========================================================================                                                                         |  50%
| Don't worry if you found these to be tricky. They're supposed to be. Working with logical statements in R takes practice, but your efforts will be
| rewarded in future lessons (e.g. subsetting and control structures).
...
|=============================================================================                                                                      |  53%
| Character vectors are also very common in R. Double quotes are used to distinguish character objects, as in the following example.
...
|=================================================================================                                                                  |  55%
| Create a character vector that contains the following words: "My", "name", "is". Remember to enclose each word in its own set of double quotes, so that R
| knows they are character strings. Store the vector in a variable called my_char.
> my_char<-c("My","name","is")
| Perseverance, that's the answer.
|=====================================================================================                                                              |  58%
| Print the contents of my_char to see what it looks like.
> my_char
[1] "My"   "name" "is"
| You are doing so well!
|=========================================================================================                                                          |  61%
| Right now, my_char is a character vector of length 3. Let's say we want to join the elements of my_char together into one continuous character string
| (i.e. a character vector of length 1). We can do this using the paste() function.
...
|=============================================================================================                                                      |  63%
| Type paste(my_char, collapse = " ") now. Make sure there's a space between the double quotes in the `collapse` argument. You'll see why in a second.
> paste(my_char,collapse=" ")
[1] "My name is"
| Your dedication is inspiring!
|=================================================================================================                                                  |  66%
| The `collapse` argument to the paste() function tells R that when we join together the elements of the my_char character vector, we'd like to separate
| them with single spaces.
...
|=====================================================================================================                                              |  68%
| It seems that we're missing something.... Ah, yes! Your name!
...
|========================================================================================================                                           |  71%
| To add (or 'concatenate') your name to the end of my_char, use the c() function like this: c(my_char, "your_name_here"). Place your name in double quotes
| where I've put "your_name_here". Try it now, storing the result in a new variable called my_name.
> my_name<-c(my_char, "Alissa")
| You nailed it! Good job!
|============================================================================================================                                       |  74%
| Take a look at the contents of my_name.
> my_name
[1] "My"     "name"   "is"     "Alissa"
| Your dedication is inspiring!
|================================================================================================================                                   |  76%
| Now, use the paste() function once more to join the words in my_name together into a single character string. Don't forget to say collapse = " "!
> paste(my_name,collapse=" ")
[1] "My name is Alissa"
| That's the answer I was looking for.
|====================================================================================================================                               |  79%
| In this example, we used the paste() function to collapse the elements of a single character vector. paste() can also be used to join the elements of
| multiple character vectors.
...
|========================================================================================================================                           |  82%
| In the simplest case, we can join two character vectors that are each of length 1 (i.e. join two words). Try paste("Hello", "world!", sep = " "), where
| the `sep` argument tells R that we want to separate the joined elements with a single space.
> paste("Hello", "world!", sep = " ")
[1] "Hello world!"
| You are quite good my friend!
|============================================================================================================================                       |  84%
| For a slightly more complicated example, we can join two vectors, each of length 3. Use paste() to join the integer vector 1:3 with the character vector
| c("X", "Y", "Z"). This time, use sep = "" to leave no space between the joined elements.
> paste(1:3,c("X", "Y", "Z"), sep="")
[1] "1X" "2Y" "3Z"
| All that practice is paying off!
|================================================================================================================================                   |  87%
| What do you think will happen if our vectors are of different length? (Hint: we talked about this in a previous lesson.)
...
|====================================================================================================================================               |  89%
| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is a predefined variable in R containing a character vector of all 26 letters in the
| English alphabet.
> paste(LETTERS, 1:4, sep = "-")
[1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2" "W-3" "X-4" "Y-1"
[26] "Z-2"
| Your dedication is inspiring!
|=======================================================================================================================================            |  92%
| Since the character vector LETTERS is longer than the numeric vector 1:4, R simply recycles, or repeats, 1:4 until it matches the length of LETTERS.
...
|===========================================================================================================================================        |  95%
| Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character vector by the paste() function.
...
|===============================================================================================================================================    |  97%
| We'll discuss coercion in another lesson, but all it really means is that the numbers 1, 2, 3, and 4 in the output above are no longer numbers to R, but
| rather characters "1", "2", "3", and "4".
...
|===================================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?
1: No
2: Yes
Selection: 2
What is your email address? alissa.zaccaria@polimi.it
What is your assignment token? EGpAwXcPCObTnwV6
Grade submission succeeded!
| That's the answer I was looking for.
| You've reached the end of this lesson! Returning to the main menu...
| Please choose a course, or type 0 to exit swirl.
1: R Programming
2: Take me to the swirl course repository!
Selection: 1
| Please choose a lesson, or type 0 to return to course menu.
1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                    5: Missing Values
6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                      9: Functions                 10: lapply and sapply
11: vapply and tapply         12: Looking at Data           13: Simulation                14: Dates and Times           15: Base Graphics
Selection: 5
|                                                                                                                                                   |   0%
| Missing values play an important role in statistics and data analysis. Often, missing values must not be ignored, but rather they should be carefully
| studied to see if there's an underlying pattern or cause for their missingness.
...
|=======                                                                                                                                            |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing' (in the statistical sense). In this lesson, we'll explore missing values
| further.
...
|===============                                                                                                                                    |  10%
| Any operation involving NA generally yields NA as the result. To illustrate, let's create a vector c(44, NA, 5, NA) and assign it to a variable x.
> x<-c(44, NA, 5, NA)
| Keep up the great work!
|======================                                                                                                                             |  15%
| Now, let's multiply x by 3.
> x*3
[1] 132  NA  15  NA
| You are quite good my friend!
|=============================                                                                                                                      |  20%
| Notice that the elements of the resulting vector that correspond with the NA values in x are also NA.
...
|=====================================                                                                                                              |  25%
| To make things a little more interesting, lets create a vector containing 1000 draws from a standard normal distribution with y <- rnorm(1000).
> y <- rnorm(1000)
| Excellent job!
|============================================                                                                                                       |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).
> z <- rep(NA, 1000)
| Excellent work!
|===================================================                                                                                                |  35%
| Finally, let's select 100 elements at random from these 2000 values (combining y and z) such that we don't know how many NAs we'll wind up with or what
| positions they'll occupy in our final vector --
my_data
library(swirl)
swirl()
esc
esc()
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my.na<-is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
matrix(1:20,nrow=4, ncol=5)
my_matrix2<-matrix(1:20,nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class()
class(my_data)
cnames<-c("patient","age","weigth","bp","rating,"test)
cnames<-c("patient","age","weigth","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
?colnames
colnames(my_data)<-cnames
my_data
install.packages("swirl")
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
source('C:/Users/aliss/AppData/Local/Temp/Rtmp67oDhU/evaluate.R', echo=TRUE)
source('C:/Users/aliss/AppData/Local/Temp/Rtmp67oDhU/evaluate.R', echo=TRUE)
source('C:/Users/aliss/AppData/Local/Temp/Rtmp67oDhU/evaluate.R', echo=TRUE)
evaluate(function(x){x(1)}, 6)
evaluate(function(x){x(1)}, c(8,4,0))
evaluate(function(x){x(1)}, 6)
library(swirl)
swirl()
View(evaluate)
View(evaluate)
evaluate(function(x){x(1)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello","world")
submit()
submit()
mad_libs(place=Milan, adjective=all,noun=covid)
mad_libs(place="Milan", adjective="all",noun="covid")
submit()
submit()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-("1969-01-01")
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
unclass(t1)
class(t1)
unclass(t1)
t2<-POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3<-strptime("October 17, 1986 08:24")
t3<-c("October 17, 1986 08:24")
t3<-("October 17, 1986 08:24")
t3<-strptime("October 17, 1986 08:24")
?strptime
t3<-strptime("October 17, 1986 08:24", format="%m-%d, %Y %H:%M" )
info()
t3<-strptime("October 17, 1986 08:24", format="%m %d, %Y %H:%M" )
t3<-strptime("October 17, 1986 08:24", format="%B %d, %Y %R" )
t3<-strptime("October 17, 1986 08:24", format="%B %d, %Y %H:%M" )
t3<-strptime("October 17, 1986 08:24", format="%B %d, %Y %R")
t3<-strptime("October 17, 1986 08:24", "%B %d, %Y %R")
info()
play()
t3<-strptime("October 17, 1986 08:24", "%B %d, %Y %R")
t3
t3<-strptime("October 17", "%B %d")
t3
t3<-strptime("October 17", "%m %d")
t3
t3<-strptime("October 17", "%b %d")
t3
t3<-strptime("October", "%b")
t3
t3<-strptime("10", "%m")
t3
t3<-strptime(10, "%m")
t3
t3<-strptime("10", %m)
strptime("2010","%Y")
strptime("2010-10","%Y")
strptime("2010-10","%Y-%m")
strptime("2010-10-20 8:10:50","%Y-%m-%d %H:%M:%S")
strptime("10-20 8:10:50","%m-%d %H:%M:%S")
strptime("10-20 8:10:50","%m-%d %H:%M:%S")
strptime("October-20 8:10:50","%B-%d %H:%M:%S")
t3<-strptime("October 17, 1986 08:24", "%B %d, %Y %H:%M")
t3
date<-"October 17, 1986 08:24"
t3<-strptime(date, "%B %d, %Y %H:%M")
t3
?strptime
date
t3<-strptime(date, "%B %d, %Y %H:%M")
date
t3
nxt()
info()
skip()
t3 <- "October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list<-sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_matrix)
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length, iris$virginica, mean)
iris$Sepal.Length
iris$virginica
View(iris)
View(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(mtcars)
force(mtcars)
View(mtcars)
View(mtcars)
tapply(mtcars$mpg,mtcars$cyl, mean)
tapply(mtcars$hp,mtcars$cyl, mean)
82.63636-209.21429
debug(ls)
ls()
rm()
cl
rm()
clear
setwd("~/GitHub/ProgrammingAssignment2")
A=repmat(1,5,5)
A=rep(1,5,5)
A
B=rep(A,7)
B=rep(A,(1,7)
B=rep(A,(1,7))
?rep
?matrix
matrix(A)
B<-matrix(A)
x<-makeCacheMatrix(B)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
x<-makeCacheMatrix(B)
View(x)
View(x)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
M <- x$get()
inv <- solve(M)
x$setmean(inv)
inv
}
cacheSolve(x)
c(1,2,3,4)
c(1,2,3,4)
A<-matrix(1:9,3,3)
A
x<-makeCacheMatrix(A)
cacheSolve(x)
A<-matrix(3:11,3,3)
x<-makeCacheMatrix(A)
cacheSolve(x)
A<-matrix(c(1,4,2,3),2,2)
x<-makeCacheMatrix(A)
cacheSolve(x)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
M <- x$get()
inv <- solve(M)
x$setinv(inv)
inv
}
cacheSolve(x)
cacheSolve(x)
